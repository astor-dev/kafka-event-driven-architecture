package com.astordev.ugc.adapter.inspectedpost

import com.astordev.ugc.CustomObjectMapper
import com.astordev.ugc.adapter.common.OperationType
import com.astordev.ugc.adapter.common.Topic
import com.astordev.ugc.inspectedpost.model.InspectedPost
import com.astordev.ugc.port.InspectedPostMessageProducePort
import com.astordev.ugc.post.model.PostId
import org.springframework.kafka.core.KafkaTemplate
import org.springframework.stereotype.Component

@Component
class InspectedPostMessageProduceAdapter(
    private val kafkaTemplate: KafkaTemplate<String, String>,
    private val customObjectMapper: CustomObjectMapper = CustomObjectMapper()
): InspectedPostMessageProducePort {
    override fun sendCreateMessage(inspectedPost: InspectedPost) {
        val message = convertToMessage(inspectedPost.post.id.long, OperationType.CREATE, inspectedPost)
        this.sendMessage(message)
    }

    override fun sendUpdateMessage(inspectedPost: InspectedPost) {
        val message = convertToMessage(inspectedPost.post.id.long, OperationType.UPDATE, inspectedPost)
        this.sendMessage(message)
    }

    override fun sendDeleteMessage(id: PostId) {
        val message = convertToMessage(id.long, OperationType.DELETE, null)
        this.sendMessage(message)
    }

    private fun convertToMessage(id: Long, operationType: OperationType, inspectedPost: InspectedPost?): InspectedPostMessage {
        return InspectedPostMessage(
            id,
            operationType,
            inspectedPost?.let {
                InspectedPostMessage.Payload(
                    inspectedPost.post,
                    inspectedPost.categoryName,
                    inspectedPost.autoGeneratedTags,
                    inspectedPost.inspectedAt,
                    )
            }
        )
    }

    private fun sendMessage(message: InspectedPostMessage) {
        kafkaTemplate.send(
            Topic.INSPECTED_POST,
            message.id.toString(),
            customObjectMapper.writeValueAsString(message)
        )
    }
}